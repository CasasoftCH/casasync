const ManifestPlugin = require('webpack-manifest-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin')
const WebpackMd5Hash = require('webpack-md5-hash');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const webpack = require('webpack');
const fs = require('fs');
const { resolve } = require('path');
const OpenBrowserPlugin = require('open-browser-webpack-plugin');

/* babel */
const babelSettings = JSON.parse(fs.readFileSync(".babelrc"));

const config = {
	devtool: 'cheap-module-eval-source-map',
	entry: [
		'webpack-dev-server/client?http://localhost:8080',
    	'webpack/hot/only-dev-server',
		'./src/scripts/main.js'
	],


	output: {
		path: resolve(__dirname, 'dist'),
		filename: '[name]-bundle.js',
	},
	
    resolveLoader: {
		moduleExtensions: ["-loader"]
	},

	module: {
		noParse: /(mapbox-gl)\.js$/,
		rules: [
      	{
	        test: /\.scss$/,
	        exclude: /node_modules/,
	        use: ExtractTextPlugin.extract({
	          fallback: 'style-loader',
	          use: [
	            'css-loader',
	            {
	              loader: 'sass-loader',
	              query: {
	                sourceMap: false,
	                includePaths: [resolve(__dirname, "node_modules")],
	                data: null,
	              },
	            },
	          ],
	          publicPath: '../'
	        }),
	      },
		{
			test: /\.js$/,
			//exclude: /node_modules/,
			include: [
				resolve(__dirname, "src"),
			],
			use:[{
				loader: "babel-loader"
			}]
		},
		/*{
			test: /\.(jpe?g|png|gif|svg)$/i,
			// exclude: /node_modules/,
			use:[{
				loader: "file?hash=sha512&digest=hex&name=[hash].[ext]"
			},
			{
				loader: "image-webpack"
			}]
		},*/
		{
			test: /\.(jpe?g|png|giv|ttf|eot|svg|woff)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
			exclude: /node_modules/,
			use: 'base64-inline-loader?name=[name].[ext]'
			/*use:[{
				loader: "file-loader",
				options: {
					emitFile: false
				}
			}]*/
		}],
	},
	devServer: {
	    hot: true,
	    host: "localhost",
	    port: 8080,
	    historyApiFallback: true
    },

	plugins: [
		new webpack.DefinePlugin({
            'process.env': {
                'NODE_ENV': JSON.stringify(process.env.NODE_ENV)
            }
        }),
		new webpack.DefinePlugin({
			'process.env.BROWSER': JSON.stringify(true),
		}),
	    new WebpackMd5Hash(),
	 	new ManifestPlugin(),
		new HtmlWebpackPlugin({
            template: './src/index.html', // input
            filename: 'index.html', // output (relative to output path)
        }),
    	new ExtractTextPlugin({ filename: './style.css', disable: true, allChunks: true }),
    	new OpenBrowserPlugin({ url: 'http://localhost:8080' }),
        new webpack.HotModuleReplacementPlugin(),
	]
};

module.exports = config
