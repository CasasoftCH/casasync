const ManifestPlugin = require('webpack-manifest-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin')
const WebpackMd5Hash = require('webpack-md5-hash');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const webpack = require('webpack');
const fs = require('fs');
const { resolve } = require('path');

/* babel */
const babelSettings = JSON.parse(fs.readFileSync(".babelrc"));

const config = {
	entry: {
		main: 
		[
			// 'babel-polyfill',
			'./src/scripts/main.js'
		],
	},


	output: {
		path: resolve(__dirname, 'dist'),
		filename: '[name]-bundle.js',
	},
	
    resolveLoader: {
		moduleExtensions: ["-loader"]
	},

	module: {
		noParse: /(mapbox-gl)\.js$/,
		rules: [{
			test: /\.scss$/,
			//exclude: resolve(__dirname, "node_modules"),
			include: [
				resolve(__dirname, "src"),
			],
			use:[{
				loader: "style-loader"
			}, {
                loader: "css-loader" // translates CSS into CommonJS
            },
            /*{
            	loader: "resolve-url"
            },*/
            {
                loader: "sass-loader", // compiles Sass to CSS
                options: {
                	sourceMap: true,
                	includePaths: [resolve(__dirname, "node_modules")]
                }
            }]
		},
		{
        	test: /\.css$/,
        	include: [
        		/*resolve(__dirname, 'node_modules/leaflet/dist/leaflet.css'),
        		resolve(__dirname, 'node_modules/mapbox-gl/dist/mapbox-gl.css')*/
        	],
        	use: [
	    		{	loader : 'style-loader' },
	    		{ 	loader : 'css-loader',
		    		options: {
		    			sourceMap: true,
		    		}
		    	}
	    	]
      	},
      	{
	        test: /\.scss$/,
	        exclude: /node_modules/,
	        use: ExtractTextPlugin.extract({
	          fallback: 'style-loader',
	          use: [
	            'css-loader',
	            {
	              loader: 'sass-loader',
	              query: {
	                sourceMap: false,
	                includePaths: [resolve(__dirname, "node_modules")],
	                data: null,
	              },
	            },
	          ],
	          publicPath: '../'
	        }),
	      },
		{
			test: /\.js$/,
			//exclude: /node_modules/,
			include: [
				resolve(__dirname, "src"),
			],
			use:[{
				loader: "babel-loader"
			}]
		},{
			test: /\.(jpe?g|png|gif|svg)$/i,
			// exclude: /node_modules/,
			use:[{
				loader: "file?hash=sha512&digest=hex&name=[hash].[ext]"
			},
			{
				loader: "image-webpack"
			}]
		},{
			test: /\.(ttf|eot|svg|woff)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
			exclude: /node_modules/,
			use:[{
				loader: "file-loader"
			}]
		}],
	},

	plugins: [
		new webpack.DefinePlugin({
            'process.env': {
                'NODE_ENV': JSON.stringify(process.env.NODE_ENV)
            }
        }),
		new webpack.DefinePlugin({
			'process.env.BROWSER': JSON.stringify(true),
		}),
	    new WebpackMd5Hash(),
	 	new ManifestPlugin(),
		new ExtractTextPlugin({ filename: './style.css', disable: false, allChunks: true }),
	 	new HtmlWebpackPlugin({
            template: './src/index.html', // input
            filename: 'index.html', // output (relative to output path)
        }),

	]
};

if (process.env.NODE_ENV === 'production') {
    config.plugins.push(
        new webpack.optimize.UglifyJsPlugin({
        	sourceMap: true,
            compress: {
				screw_ie8: true,
              	warnings: false,
  				comparisons: false,  // don't optimize comparisons
            }
        })
    );
    config.plugins.push(
        new CleanWebpackPlugin(['dist/*'], {verbose: true, watch: false}),
    );
    babelSettings.plugins.push("transform-react-inline-elements");
    babelSettings.plugins.push("transform-react-constant-elements");

} else {
    config.devtool = "#cheap-module-source-map";
    config.plugins.push(
        new webpack.HotModuleReplacementPlugin()
    );
    config.devServer = {
        hot: true,
        host: "localhost",
        port: 8080,
        historyApiFallback: true
    };
}


module.exports = config
